// <auto-generated />
using System;
using Cartoon.Repository.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cartoon.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.DienVienLongTiengEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TenDienVien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DienVienLongTieng");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.DienVienTGLongTiengEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DienVienId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaDienVien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaPhim")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DienVienId");

                    b.HasIndex("MaPhim");

                    b.ToTable("DienVienTGLongTieng");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.NhanVatEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("tenNhanVat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NhanVat");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.NhanVatTrongTapPhimEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaNhanVat")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaTapPhim")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tinhTrangNhanVat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trangThaiNhanVat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaNhanVat");

                    b.HasIndex("MaTapPhim");

                    b.ToTable("NhanVatTrongTapPhim");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.PhimHoatHinhEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DaoDien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NamSanXuat")
                        .HasColumnType("int");

                    b.Property<string>("NhaXuatBan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenPhim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhimHoatHinh");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.TapPhimEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaPhim")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenTapPhim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaPhim");

                    b.ToTable("TapPhim");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.DienVienTGLongTiengEntity", b =>
                {
                    b.HasOne("Cartoon.Contract.Repository.Models.DienVienLongTiengEntity", "DienVien")
                        .WithMany("DienVienTGLongTiengs")
                        .HasForeignKey("DienVienId");

                    b.HasOne("Cartoon.Contract.Repository.Models.PhimHoatHinhEntity", "PhimHoatHinh")
                        .WithMany("DienVienTGLongTiengs")
                        .HasForeignKey("MaPhim")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DienVien");

                    b.Navigation("PhimHoatHinh");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.NhanVatTrongTapPhimEntity", b =>
                {
                    b.HasOne("Cartoon.Contract.Repository.Models.NhanVatEntity", "NhanVat")
                        .WithMany("NhanVatTrongTapPhims")
                        .HasForeignKey("MaNhanVat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartoon.Contract.Repository.Models.TapPhimEntity", "TapPhim")
                        .WithMany("NhanVatTrongTapPhims")
                        .HasForeignKey("MaTapPhim")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NhanVat");

                    b.Navigation("TapPhim");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.TapPhimEntity", b =>
                {
                    b.HasOne("Cartoon.Contract.Repository.Models.PhimHoatHinhEntity", "PhimHoatHinh")
                        .WithMany("TapPhims")
                        .HasForeignKey("MaPhim")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhimHoatHinh");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.DienVienLongTiengEntity", b =>
                {
                    b.Navigation("DienVienTGLongTiengs");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.NhanVatEntity", b =>
                {
                    b.Navigation("NhanVatTrongTapPhims");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.PhimHoatHinhEntity", b =>
                {
                    b.Navigation("DienVienTGLongTiengs");

                    b.Navigation("TapPhims");
                });

            modelBuilder.Entity("Cartoon.Contract.Repository.Models.TapPhimEntity", b =>
                {
                    b.Navigation("NhanVatTrongTapPhims");
                });
#pragma warning restore 612, 618
        }
    }
}
